AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Parameters:
  DatabaseUrl:
    Type: String
    Description: "Database connection URL"
    NoEcho: true
  MaxComponentCount:
    Type: String
    Description: "Maximum number of components"
  MinColumnCount:
    Type: String
    Description: "Minimum number of columns"
  S3BucketName:
    Type: String
    Description: "S3 bucket name for resources"
  GoogleCredentials:
    Type: String
    Description: "Google credentials file path"

Globals:
  Function:
    Runtime: python3.9
    MemorySize: 256
    Timeout: 30
    Tracing: Active
    LoggingConfig:
      LogFormat: JSON
    Environment:
      Variables:
        POWERTOOLS_SERVICE_NAME: japanese-learn
        LOG_LEVEL: INFO
        DATABASE_URL: !Ref DatabaseUrl
        MAX_COMPONENT_COUNT: !Ref MaxComponentCount
        MIN_COLUMN_COUNT: !Ref MinColumnCount
        S3_BUCKET_NAME: !Ref S3BucketName
        GOOGLE_APPLICATION_CREDENTIALS: !Ref GoogleCredentials
  Api:
    Cors:
      AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,Origin,Accept'"
      AllowOrigin: "'*'"

Resources:
  # Cognito User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${AWS::StackName}-user-pool
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true

  # Cognito User Pool Client
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: !Sub ${AWS::StackName}-client
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      PreventUserExistenceErrors: ENABLED
      AuthSessionValidity: 15
      AccessTokenValidity: 60
      IdTokenValidity: 60
      RefreshTokenValidity: 30
      TokenValidityUnits:
        AccessToken: "minutes"
        IdToken: "minutes"
        RefreshToken: "days"

  # DynamoDB Table
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-table
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: GSI1PK
          AttributeType: S
        - AttributeName: GSI1SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - AttributeName: GSI1PK
              KeyType: HASH
            - AttributeName: GSI1SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TimeToLiveSpecification:
        AttributeName: TTL
        Enabled: true
      Tags:
        - Key: Environment
          Value: !Ref AWS::StackName

  # Authentication Lambda Function
  AuthenticationFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: python3.9
      BuildProperties:
        UseContainer: true
        ProjectPath: ./app/api/v1/auth
        InstallDependencies: true
    Properties:
      FunctionName: !Sub "${AWS::StackName}-AuthenticationFunction"
      CodeUri: ./app/api/v1/auth
      Handler: app.lambda_handler
      Description: "Lambda function for authentication endpoints"
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref DynamoDBTable
          JWT_SECRET_KEY: "your-secret-key"  # 本番環境では別途設定すべき
          USER_POOL_ID: !Ref UserPool
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
      Events:
        AuthApiRootEvent:
          Type: Api
          Properties:
            Path: /api/v1/auth
            Method: ANY
        AuthApiProxyEvent:
          Type: Api
          Properties:
            Path: /api/v1/auth/{proxy+}
            Method: ANY
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:Scan
              Resource:
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTable}/index/*"

  # Lambda Functions
  WordsFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: python3.9
      BuildProperties:
        UseContainer: true
        ProjectPath: ./app/api/v1/words
        InstallDependencies: true
    Properties:
      FunctionName: !Sub "${AWS::StackName}-WordsFunction"
      CodeUri: ./app/api/v1/words
      Handler: app.lambda_handler
      Description: "Lambda function for words-related endpoints"
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref DynamoDBTable
          S3_BUCKET_NAME: !Ref S3BucketName
      Events:
        WordsApiRootEvent:
          Type: Api
          Properties:
            Path: /api/v1/words
            Method: ANY
        WordsApiProxyEvent:
          Type: Api
          Properties:
            Path: /api/v1/words/{proxy+}
            Method: ANY
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable
        - Statement:
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
              - s3:ListBucket
            Resource:
              - !Sub "arn:aws:s3:::${S3BucketName}"
              - !Sub "arn:aws:s3:::${S3BucketName}/*"

  LearnWordsFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: python3.9
      BuildProperties:
        UseContainer: true
        ProjectPath: ./app/api/v1/learn_words
        InstallDependencies: true
    Properties:
      FunctionName: !Sub "${AWS::StackName}-LearnWordsFunction"
      CodeUri: ./app/api/v1/learn_words
      Handler: app.lambda_handler
      Description: "Lambda function for learning history endpoints"
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref DynamoDBTable
      Events:
        LearnWordsApiRootEvent:
          Type: Api
          Properties:
            Path: /api/v1/learn_words
            Method: ANY
        LearnWordsApiProxyEvent:
          Type: Api
          Properties:
            Path: /api/v1/learn_words/{proxy+}
            Method: ANY
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable

  KanjisFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: python3.9
      BuildProperties:
        UseContainer: true
        ProjectPath: ./app/api/v1/kanjis
        InstallDependencies: true
    Properties:
      FunctionName: !Sub "${AWS::StackName}-KanjisFunction"
      CodeUri: ./app/api/v1/kanjis
      Handler: app.lambda_handler
      Description: "Lambda function for kanjis-related endpoints"
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref DynamoDBTable
      Events:
        KanjisApiRootEvent:
          Type: Api
          Properties:
            Path: /api/v1/kanjis
            Method: ANY
        KanjisApiProxyEvent:
          Type: Api
          Properties:
            Path: /api/v1/kanjis/{proxy+}
            Method: ANY
        ComponentsApiRootEvent:
          Type: Api
          Properties:
            Path: /api/v1/components
            Method: ANY
        ComponentsApiProxyEvent:
          Type: Api
          Properties:
            Path: /api/v1/components/{proxy+}
            Method: ANY
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:Scan
              Resource:
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTable}/index/*"

  # CloudWatch Log Groups
  WordsFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${WordsFunction}"
      RetentionInDays: 14
    DependsOn: WordsFunction

  KanjisFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${KanjisFunction}"
      RetentionInDays: 14
    DependsOn: KanjisFunction

  LearnWordsFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LearnWordsFunction}"
      RetentionInDays: 14
    DependsOn: LearnWordsFunction

Outputs:
  ApiEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  WordsFunctionArn:
    Description: "Words Function ARN"
    Value: !GetAtt WordsFunction.Arn
  KanjisFunctionArn:
    Description: "Kanjis Function ARN"
    Value: !GetAtt KanjisFunction.Arn
  ApiId:
    Description: "API Gateway ID"
    Value: !Ref ServerlessRestApi
  UserPoolId:
    Description: "Cognito User Pool ID"
    Value: !Ref UserPool
  UserPoolClientId:
    Description: "Cognito User Pool Client ID"
    Value: !Ref UserPoolClient
